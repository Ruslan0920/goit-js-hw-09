{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SA6BpC,SAASC,EAAcC,EAAUC,GAG/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAC1CC,YAAW,WACHH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEtBA,E,IAzCHQ,QAAQC,IAAId,GAEZA,EAAKe,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAMC,iBAIJ,IAHF,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAGVC,EAAI,EAAGA,EAAID,EAAOE,MAAOD,GAAG,EAAE,CACvCX,QAAQC,IAAIU,GACV,IAAME,EAAWF,EAAI,EACrBX,QAAQC,IAAIY,GACZ,IAAMC,EAASC,OAAOP,EAAMI,OAASH,EAAKG,MAAQD,EAClDX,QAAQC,IAAIO,EAAMI,OAClBZ,QAAQC,IAAIQ,EAAKG,OAEvBtB,EAAcuB,EAAUC,GACrBE,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjB0B,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,O,IAEvE8B,OAAM,SAAAL,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClB0B,EAAAjC,GAASkC,OAAOI,QAAQ,sBAAuCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\nconsole.log(form);\n\nform.addEventListener(\"submit\", submitForm);\n\nfunction submitForm(event) {\n  event.preventDefault();\n  const { delay, step, amount } = event.currentTarget.elements;\n  // console.log(event.currentTarget.elements);\n    \n    for (let i = 0; i < amount.value; i+=1){\n    console.log(i);\n      const position = i + 1;\n      console.log(position);\n      const delays = Number(delay.value) + step.value * i;\n      console.log(delay.value);\n      console.log(step.value);\n       \ncreatePromise(position, delays)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n  });\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  // inputAmount.value = position;\n  // inputStep.value = delay;\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\nsetTimeout(() => {\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay });\n    } else {\n      // Reject\n      reject({ position, delay });\n    }\n}, delay);\n  });\n\n}\n\n// createPromise(3, 1500)\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","i","value","position1","delays","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.25f5a5d3.js.map"}